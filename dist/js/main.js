"use strict";function getGoals(){$.get(viewModel.apiUrl,function(e){viewModel.goals(e.goals)})}function ViewModel(){var d=this;d.apiUrl="https://flask-restful-goaltracker.herokuapp.com/goals",d.goalTypes=ko.observableArray(["Health & Fitness","Profeessional","Family & Relationships","Self help"]),d.goals=ko.observableArray(),d.editMode=ko.observable(!1),d.updatableGoal=ko.observable(),d.goalInputName=ko.observable(),d.goalInputType=ko.observable(),d.goalInputDeadline=ko.observable(),d.addGoal=function(){var e=d.goalInputName(),a=d.goalInputType(),o=d.goalInputDeadline(),l={name:e,type:a,deadline:o};$.ajax({url:d.apiUrl,data:JSON.stringify({name:e,type:a,deadline:o}),type:"POST",contentType:"application/json",success:function(e){console.log("Goal Added.."),l._id=e._id,d.goals.push(l),d.restForm()},error:function(e,a,o){consoe.log("an error detected...")}})},d.deleteGoal=function(){var o=d.goals().indexOf(this);$.ajax({url:d.apiUrl+"/"+this._id,type:"Delete",success:function(e){console.log("deleted",e);var a=d.goals();a.splice(o,1),d.goals(a)},error:function(e,a,o){console.log("an error detected...")}})},d.editGoal=function(){d.editMode(!0),d.goalInputName(this.name),d.goalInputType(this.type),d.goalInputDeadline(this.deadline),d.updatableGoal(this)},d.allowUpdate=ko.observable(!1),d.updateGoal=function(){var e=d.updatableGoal(),l=e._id,t=d.goalInputName(),n=d.goalInputType(),i=d.goalInputDeadline(),s=d.goals().indexOf(e);$.ajax({url:d.apiUrl+"/"+l,data:JSON.stringify({name:t,type:n,deadline:i}),type:"PUT",contentType:"application/json",success:function(e){console.log("updated");var a=d.goals()[s],o={_id:l,name:t,type:n,deadline:i};d.goals.replace(a,o),d.restForm()},error:function(e,a,o){console.log("an error detected...")}})},d.restForm=function(){d.goalInputName(""),d.goalInputType(""),d.goalInputDeadline(""),d.updatableGoal(""),d.editMode(!1)}}var viewModel=new ViewModel;ko.applyBindings(viewModel);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
