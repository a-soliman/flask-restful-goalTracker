"use strict";function getGoals(){$.get("http://localhost:3333/goals",function(e){viewModel.goals(e)})}function ViewModel(){var d=this;d.goalTypes=ko.observableArray(["Health & Fitness","Profeessional","Family & Relationships","Self help"]),d.goals=ko.observableArray(),d.editMode=ko.observable(!1),d.updatableGoal=ko.observable(),d.goalInputName=ko.observable(),d.goalInputType=ko.observable(),d.goalInputDeadline=ko.observable(),d.addGoal=function(){var e=d.goalInputName(),o=d.goalInputType(),a=d.goalInputDeadline(),l={name:e,type:o,deadline:a};$.ajax({url:"http://localhost:3333/goals",data:JSON.stringify({name:e,type:o,deadline:a}),type:"POST",contentType:"application/json",success:function(e){console.log("Goal Added.."),l._id=e._id,d.goals.push(l),d.restForm()},error:function(e,o,a){consoe.log("an error detected...")}})},d.deleteGoal=function(){var a=d.goals().indexOf(this);$.ajax({url:"http://localhost:3333/goals/"+this._id,type:"Delete",success:function(e){console.log("deleted",e);var o=d.goals();o.splice(a,1),d.goals(o)},error:function(e,o,a){console.log("an error detected...")}})},d.editGoal=function(){d.editMode(!0),d.goalInputName(this.name),d.goalInputType(this.type),d.goalInputDeadline(this.deadline),d.updatableGoal(this)},d.allowUpdate=ko.observable(!1),d.updateGoal=function(){var e=d.updatableGoal(),l=e._id,t=d.goalInputName(),n=d.goalInputType(),s=d.goalInputDeadline(),i=d.goals().indexOf(e);$.ajax({url:"http://localhost:3333/goals/"+l,data:JSON.stringify({name:t,type:n,deadline:s}),type:"PUT",contentType:"application/json",success:function(e){console.log("updated");var o=d.goals()[i],a={_id:l,name:t,type:n,deadline:s};d.goals.replace(o,a),d.restForm()},error:function(e,o,a){console.log("an error detected...")}})},d.restForm=function(){d.goalInputName(""),d.goalInputType(""),d.goalInputDeadline(""),d.updatableGoal(""),d.editMode(!1)}}var viewModel=new ViewModel;ko.applyBindings(viewModel);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
